"""Change image id to UUID and update related references

Revision ID: e7c9c14b46af
Revises: fb19c131c0ee
Create Date: 2025-03-01 22:48:38.774919

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID, JSONB, ARRAY
import uuid

# revision identifiers, used by Alembic.
revision = 'e7c9c14b46af'
down_revision = 'fb19c131c0ee'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # 确保创建了uuid-ossp扩展
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    
    # 1. 备份现有数据
    op.execute('CREATE TABLE images_backup AS SELECT * FROM images')
    op.execute('CREATE TABLE recipes_backup AS SELECT * FROM recipes')
    op.execute('CREATE TABLE cooking_records_backup AS SELECT * FROM cooking_records')
    
    # 2. 删除依赖关系
    op.execute('ALTER TABLE cooking_records DROP CONSTRAINT cooking_records_recipe_id_fkey')
    op.execute('ALTER TABLE recipes DROP CONSTRAINT recipes_main_image_id_fkey')
    
    # 3. 创建新的images表结构，使用UUID作为主键
    op.execute("""
    CREATE TABLE images_new (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        file_path VARCHAR(255) NOT NULL,
        original_filename VARCHAR(255),
        mime_type VARCHAR(50),
        file_size INTEGER,
        width INTEGER,
        height INTEGER,
        ai_tags JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
    )
    """)
    
    # 4. 从备份表复制数据，为每个记录生成新的UUID
    op.execute("""
    INSERT INTO images_new (file_path, original_filename, mime_type, file_size, width, height, ai_tags, created_at)
    SELECT file_path, original_filename, mime_type, file_size, width, height, ai_tags, created_at
    FROM images_backup
    """)
    
    # 5. 创建一个映射表，将老的整数ID映射到新的UUID
    op.execute("""
    CREATE TABLE id_mapping (
        old_id INTEGER,
        new_id UUID,
        PRIMARY KEY (old_id)
    )
    """)
    
    # 6. 将映射数据填充到映射表
    op.execute("""
    INSERT INTO id_mapping (old_id, new_id)
    SELECT i.id, n.id
    FROM images_backup i
    JOIN images_new n ON i.file_path = n.file_path AND 
                        (i.original_filename = n.original_filename OR 
                         (i.original_filename IS NULL AND n.original_filename IS NULL))
    """)
    
    # 7. 创建新的recipes表结构
    op.execute("""
    CREATE TABLE recipes_new (
        id INTEGER PRIMARY KEY,
        title VARCHAR(100) NOT NULL,
        description TEXT,
        difficulty INTEGER,
        cooking_time INTEGER,
        servings INTEGER,
        user_id INTEGER REFERENCES users(id),
        main_image_id UUID REFERENCES images_new(id),
        ingredients JSONB,
        steps JSONB,
        tags VARCHAR[],
        created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
    )
    """)
    
    # 8. 使用映射表填充recipes_new表
    op.execute("""
    INSERT INTO recipes_new (id, title, description, difficulty, cooking_time, servings, user_id, main_image_id, ingredients, steps, tags, created_at, updated_at)
    SELECT r.id, r.title, r.description, r.difficulty, r.cooking_time, r.servings, r.user_id,
          m.new_id, r.ingredients, r.steps, r.tags, r.created_at, r.updated_at
    FROM recipes_backup r
    LEFT JOIN id_mapping m ON r.main_image_id = m.old_id
    """)
    
    # 9. 创建新的cooking_records表结构
    op.execute("""
    CREATE TABLE cooking_records_new (
        id INTEGER PRIMARY KEY,
        recipe_id INTEGER REFERENCES recipes_new(id),
        user_id INTEGER REFERENCES users(id),
        rating INTEGER,
        notes TEXT,
        images VARCHAR[],
        created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
    )
    """)
    
    # 10. 从备份表填充cooking_records数据
    op.execute("""
    INSERT INTO cooking_records_new (id, recipe_id, user_id, rating, notes, images, created_at)
    SELECT id, recipe_id, user_id, rating, notes, images, created_at
    FROM cooking_records_backup
    """)
    
    # 11. 删除旧表并重命名新表
    op.execute("DROP TABLE cooking_records")
    op.execute("DROP TABLE recipes")
    op.execute("DROP TABLE images")
    op.execute("ALTER TABLE cooking_records_new RENAME TO cooking_records")
    op.execute("ALTER TABLE recipes_new RENAME TO recipes")
    op.execute("ALTER TABLE images_new RENAME TO images")
    
    # 12. 创建索引
    op.execute("CREATE INDEX ix_images_id ON images (id)")
    op.execute("CREATE INDEX ix_recipes_title ON recipes (title)")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # 由于这是一个复杂的数据类型转换，恢复数据最好的方式是使用备份表
    op.execute("DROP TABLE IF EXISTS cooking_records")
    op.execute("DROP TABLE IF EXISTS recipes")
    op.execute("DROP TABLE IF EXISTS images")
    
    if op.get_bind().dialect.has_table(op.get_bind(), "recipes_backup"):
        op.execute("CREATE TABLE images AS SELECT * FROM images_backup")
        op.execute("CREATE TABLE recipes AS SELECT * FROM recipes_backup")
        op.execute("CREATE TABLE cooking_records AS SELECT * FROM cooking_records_backup")
        
        # 恢复索引和外键
        op.execute("CREATE INDEX ix_images_id ON images (id)")
        op.execute("CREATE INDEX ix_recipes_title ON recipes (title)")
        op.execute("ALTER TABLE recipes ADD CONSTRAINT recipes_main_image_id_fkey FOREIGN KEY (main_image_id) REFERENCES images (id)")
        op.execute("ALTER TABLE cooking_records ADD CONSTRAINT cooking_records_recipe_id_fkey FOREIGN KEY (recipe_id) REFERENCES recipes (id)")
    else:
        # 如果备份表不存在，则创建基本结构
        op.execute("""
        CREATE TABLE images (
            id SERIAL PRIMARY KEY,
            file_path VARCHAR(255) NOT NULL,
            original_filename VARCHAR(255),
            mime_type VARCHAR(50),
            file_size INTEGER,
            width INTEGER,
            height INTEGER,
            ai_tags JSONB,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
        )
        """)
        
        op.execute("""
        CREATE TABLE recipes (
            id SERIAL PRIMARY KEY,
            title VARCHAR(100) NOT NULL,
            description TEXT,
            difficulty INTEGER,
            cooking_time INTEGER,
            servings INTEGER,
            user_id INTEGER REFERENCES users(id),
            main_image_id INTEGER REFERENCES images(id),
            ingredients JSONB,
            steps JSONB,
            tags VARCHAR[],
            created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
        )
        """)
        
        op.execute("""
        CREATE TABLE cooking_records (
            id SERIAL PRIMARY KEY,
            recipe_id INTEGER REFERENCES recipes(id),
            user_id INTEGER REFERENCES users(id),
            rating INTEGER,
            notes TEXT,
            images VARCHAR[],
            created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
        )
        """)
        
        op.execute("CREATE INDEX ix_images_id ON images (id)")
        op.execute("CREATE INDEX ix_recipes_title ON recipes (title)")
    # ### end Alembic commands ### 